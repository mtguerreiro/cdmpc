/**
 * @file dmpc_buck_matrices.h
 * @brief Header with data to run the DMPC algorithm for a buck converter.
 *
 * This file is generated automatically and should not be modified.
 *
 * The Hj matrix is already generated by flipping the sign and inverting its
 * diagonal elements, so that Hildreth's algorithm does not require any 
 * divisions.
 *
 *  Originally created on: 27.05.2021
 *      Author: mguerreiro
 */

#ifndef DMPC_BUCK_MATRICES_H_
#define DMPC_BUCK_MATRICES_H_

/* Prediction, control and restriction horizon */
#define DMPC_BUCK_CONFIG_NP			6
#define DMPC_BUCK_CONFIG_NC			6
#define DMPC_BUCK_CONFIG_NR			1
#define DMPC_BUCK_CONFIG_NLAMBDA	4

/* Constraints */
#define DMPC_BUCK_CONFIG_IL_MIN		-10
#define DMPC_BUCK_CONFIG_IL_MAX		10
#define DMPC_BUCK_CONFIG_U_MIN		0
#define DMPC_BUCK_CONFIG_U_MAX		1

 /* Matrices */
float Fj_1[6] = {-16.69227755,-11.15563083, -6.88768825, -3.78089167, -1.70391711,
  -0.50239096};

float Fj_2[6][3] = {{ 6.74369522,62.18772113,16.69227755},
 { 4.88955505,43.87904879,11.15563083},
 { 3.27570949,28.4520598 , 6.88768825},
 { 1.95049214,16.32768834, 3.78089167},
 { 0.95306163, 7.66223847, 1.70391711},
 { 0.30461254, 2.3446102 , 0.50239096}};

float Fx[3] = { 0.9802431,-0.4133303, 0.       };

float Kj_1[4][6] = {{-0.04658414, 0.03488136, 0.02037572, 0.01020682, 0.00401225, 0.00096657},
 { 0.04658414,-0.03488136,-0.02037572,-0.01020682,-0.00401225,-0.00096657},
 {-0.31053316, 0.23252158, 0.13582596, 0.06803937, 0.02674592, 0.00644322},
 { 0.31053316,-0.23252158,-0.13582596,-0.06803937,-0.02674592,-0.00644322}};

float Hj[4][4] = {{-21.46653275, -0.04658414,  0.31053316, -0.31053316},
 { -0.04658414,-21.46653275, -0.31053316,  0.31053316},
 {  0.31053316, -0.31053316, -0.48308341, -2.0700359 },
 { -0.31053316,  0.31053316, -2.0700359 , -0.48308341}};

float DU_1[6] = {-0.04658414, 0.03488136, 0.02037572, 0.01020682, 0.00401225, 0.00096657};

float DU_2[4] = { 0.04658414,-0.04658414, 0.31053316,-0.31053316};


#endif /* DMPC_BUCK_MATRICES_H_ */
