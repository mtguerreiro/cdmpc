/**
 * @file dmpc_buck_matrices.h
 * @brief Header with data to run the DMPC algorithm for a buck converter.
 *
 * This file is generated automatically and should not be modified.
 *
 * The Hj matrix is already generated by flipping the sign and inverting its
 * diagonal elements, so that Hildreth's algorithm does not require any 
 * divisions.
 *
 *  Originally created on: 27.05.2021
 *      Author: mguerreiro
 */

#ifndef DMPC_BUCK_MATRICES_H_
#define DMPC_BUCK_MATRICES_H_

/* Prediction, control and restriction horizon */
#define DMPC_BUCK_CONFIG_NP			50
#define DMPC_BUCK_CONFIG_NC			5
#define DMPC_BUCK_CONFIG_NR			1
#define DMPC_BUCK_CONFIG_NLAMBDA	4

/* Constraints */
#define DMPC_BUCK_CONFIG_IL_MIN		-15
#define DMPC_BUCK_CONFIG_IL_MAX		15
#define DMPC_BUCK_CONFIG_U_MIN		0
#define DMPC_BUCK_CONFIG_U_MAX		1

 /* Matrices */
float Fj_1[5] = {-176.58052513,-167.34004592,-158.37841867,-149.69579129,-141.29204683};

float Fj_2[5][3] = {{ 997.40930027,4482.0510662 , 176.58052513},
 { 955.35079603,4270.14608772, 167.34004592},
 { 913.83216355,4062.36849024, 158.37841867},
 { 872.89497784,3858.92331213, 149.69579129},
 { 832.58021864,3660.00291476, 141.29204683}};

float Fx[3] = { 0.99952615,-0.10614239, 0.        };

float Kj_1[4][5] = {{-0.03635849, 0.0121031 , 0.01064173, 0.00925893, 0.00795591},
 { 0.03635849,-0.0121031 ,-0.01064173,-0.00925893,-0.00795591},
 {-0.03867008, 0.01287258, 0.0113183 , 0.00984759, 0.00846173},
 { 0.03867008,-0.01287258,-0.0113183 ,-0.00984759,-0.00846173}};

float Hj[4][4] = {{-27.50388951, -0.03635849,  0.03867008, -0.03867008},
 { -0.03635849,-27.50388951, -0.03867008,  0.03867008},
 {  0.03867008, -0.03867008,-24.31395657, -0.04112864},
 { -0.03867008,  0.03867008, -0.04112864,-24.31395657}};

float DU_1[5] = {-0.03635849, 0.0121031 , 0.01064173, 0.00925893, 0.00795591};

float DU_2[4] = { 0.03635849,-0.03635849, 0.03867008,-0.03867008};


#endif /* DMPC_BUCK_MATRICES_H_ */
