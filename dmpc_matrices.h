/**
 * @file dmpc_matrices.h
 * @brief Header with data to run the DMPC algorithm.
 *
 * This file is generated automatically and should not be modified.
 *
 * The Hj matrix is already generated by flipping the sign and inverting its
 * diagonal elements, so that Hildreth's algorithm does not require any 
 * divisions.
 *
 *  Originally created on: 22.04.2022
 *      Author: mguerreiro
 */

#ifndef DMPC_MATRICES_H_
#define DMPC_MATRICES_H_

#include "stdint.h"

/* Input constraints */
extern float DMPC_CONFIG_U_MIN[1];
extern float DMPC_CONFIG_U_MAX[1];
extern uint32_t DMPC_CONFIG_U_LIM_IDX[1];

/* State constraints */
 
/* Indexes of outputs */
extern uint32_t DMPC_CONFIG_Y_IDX[1];

/* A and B matrices for prediction */
extern float DMPC_M_A[1];
extern float DMPC_M_B[2];

/*
 * Matrices for QP solvers 
 *
 * The matrices were generated considering the following problem:
 *
 * min (1/2) * DU' * Ej * DU + DU' * Fj
 * DU
 *
 * s.t. M * DU <= gam
 *
 * The (1/2) term in from of DU' * Ej * DU needs to be considered in the QP
 * solver selected, or the solution will appear to be inconsistent.
 * Note that the Fj and gam matrices are usually updated online, while Ej
 * and M are static.
 */
extern float DMPC_M_Ej[10][10];

extern float DMPC_M_Fj[10];

extern float DMPC_M_M[2][10];

extern float DMPC_M_gam[2];

 /* Matrices for Hildreth's QP procedure */
extern float DMPC_M_Fj_1[10];

extern float DMPC_M_Fj_2[10][2];

extern float DMPC_M_Fx[1];

extern float DMPC_M_Kj_1[2][10];

extern float DMPC_M_Hj[2][2];

extern float DMPC_M_DU_1[10];

extern float DMPC_M_DU_2[2];


#endif /* DMPC_MATRICES_H_ */
